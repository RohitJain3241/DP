/*
    LCS: Problem statement: Given two sequences, we have to find the length
    of the longest subsequence present in both of them. A subsequence is a
    sequence that appears in the same relative order. For example, "abc",
    "abg", "bdf", "aeg", "acefg"..etc are subsequences of "abcdefg". So a
    string of length n has 2^n different possible subsequences.

    It is a classic computer science problem and has the following applications ->
    1. Used as a subroutine in diff function to compare the differences between the
    two files.
    2. Also has a wide range of application in bioinformatics.

    Examples:
    1. Longest Common Subsequences of "ABCDGH" and "AEDFHR"
    is "ADH" of length 3.
    2. LCS for input sequences "AGGTAB" and "GXTXAYB" is "GTAB" and
    is of length 4.

    The naive solution for this problem is to generate all the possible subsequences
    of both the given subsequences and find the longest matching subsequence. This
    solution is exponential in terms of the time complexity. This problem possesses
    the important properties of the dynamic programming(DP) problem as follows ->

    1. OPTIMAL SUBSTRUCTURE:
        Let the input sequences be X[0...m-1] and Y[0...n-1] of lengths m and n respectively.
        And let L(X[0...m-1], Y[0...n-1]) be the length of the LCS of the two sequences X and Y.
        Following is the recursive definition of L(X[0...m-1], Y[0...n-1]).

        If the last characters of both the sequences match(or X[m-1] == Y[n-1]) then
        L(X(0...m-1), Y[0...n-1]) = 1 + L(X[0...m-2], Y[0...n-2])

        IF the last characters of both the sequences do not match(or X[m-1] != Y[n-1]) then
        L(X[0...m-1], Y[0...n-1]) = Max(L(X[0...m-1], Y[0...n-2]), L(X[0...m-2], Y[0...n-1]))

        Examples:
        1. Consider the input strings "AGGTAB" and "GXTXAYB". Last characters match for the strings,
        So the length of LCS can be written as:
            L("AGGTAB", "GXTXAYB") = 1 + L("AGGTA", "GXTXAY")
        2. Consider the input strings "ABCDGH" and "AEDFHR". Last characters do not match for the
        strings, So the length of LCS can be written as
            L("ABCDGH", "GXTXAY") = Max(L("ABCDGH", "GXTXAY"), L("ABCDGH", "GXTXA"))

        So the LCS problem has optimal substructure property as the main problem can be solved
        using solutions to subproblems. Conceptualize the word as Optimal Sub-Structure and then feel it.

    2. OVERLAPPING SUBPROBLEMS:
        Following is the recursive implementation of the LCS problem. The implementation
        simply follows the recursive structure mentioned above.

        Clearly after going through this algorithm and drawing the recursion tree we see that
        there are many subproblems which overlap and thereby we are doing a lot of unnecessary
        work. One argument that can be made for prooving that the subproblems overlap is ->
            Consider that we are given two strings s1 and s2. Now solving the LCS for s1
            and s2 is dependent of (s1-lastIndex and s2), (s1 and s2-lastIndex), (s1-lastIndex
            and s2-lastIndex). Lets call these subproblems a, b and c respectively. Now
            its quite obvious here that c will also be a subproblem of a and b. Hence the subproblem
            overlapping occurs if we see this recursively. Hence dynamic programming is the right
            tool we should opt for to make the program more efficient. In fact the time complexity of
            this naive approach is exponential.

 */

public class LongestCommonSubsequence {

    // The function given here calculates the longest common subsequence given two strings and
    // index of their last characters everything eventually comes down to this step by gradually decreasing
    // by one.
    public int longestCommonSubsequenceRecursive(String s1, String s2, int lastIndex1, int lastIndex2){

        // Now here we can have empty strings or we can even have null strings
        if(lastIndex1 == -1 || lastIndex2 == -1  || s1 == null || s2 == null){
            return 0;
        }

        // If the the characters at the very last index of both the strings are the same
        // then it means that the longest common subsequence of both the strings are the longest common
        // subsequence of the both the strings with one less length + the last character(which is the same in
        // both of them). Just think of this as we have one less length strings and now we add same characters
        // in both of them and we have got a new LCS which we can easily see is LCSold + last added character in
        // both of them.
        if(s1.charAt(lastIndex1) == s2.charAt(lastIndex2)){
            return 1 + longestCommonSubsequenceRecursive(s1, s2, lastIndex1 - 1, lastIndex2 - 1);
        }

        // If the characters at the very last indices are not the same. Then we can have two possbile cases ->
        // 1. the character amounts to nothing and is just a shit added. It happens when the added character is
        // not present in the other string after the LCS. In this case adding or not adding are equivalent only and
        // the lowest common subsequence of s1 and s2 is the lowest common subsequence of s1 - last character and s2
        // (as the last added character makes no sense here).
        // 2. the other possibility is that the last added character in s1 is present in s2 after the LCS but not the
        // last(because that case is already checked at the very first place). Clearly adding it increases the LCS prev
        // length by one. So new LCS becomes the same LCS of s1 with added last character and s2 with last character removed.
        // Now clearly if we must have gone for the second case then we would get a bigger string as LCS then the first case
        // because something is added that is of interest to us. Hence we can take the maximum of both the cases and we
        // will get to know what must have been the case.
        else{
            return Integer.max(longestCommonSubsequenceRecursive(s1, s2, lastIndex1 - 1, lastIndex2),
                    longestCommonSubsequenceRecursive(s1, s2, lastIndex1, lastIndex2 - 1));
        }

    }


    /*
    Time complexity of this algorithm is O(mn) which is much better than the
    naive recursive implementation. Also the space complexity is O(mn). It can
    also be optimized.
     */
    public int longestCommonSubsequenceDynamic(String s1, String s2){
        // Handled null case as well.
        if(s1 == null || s2 == null){
            return 0;
        }

        // If it is not null then only we should proceed for this.
        int length1 = s1.length();
        int length2 = s2.length();

        int[][] dpMatrix = new int[length1 + 1][length2 + 1]; // this is because we want total
        // number of columns to be s2.length() + 1 as we want to include space for empty string also.
        // This is because that is our base case and is required to start filling out the other things.
        // Similar argument for the number of rows.

        // If s2(string represented by the columns) is an empty string then no matter what s1 is LCS = 0;
        // This is a good strategy and used quite often in dp and is used for dodging corner cases.
//        for(int i = 0; i < dpMatrix.length; i++){
//            dpMatrix[i][0] = 0;
//        }

        // Similarly for the columns. Note we are not doing it explicitly because the constructor by default
        // inserts in the value 0.

        // Filling up the dpMatrix based upon our logic.
        for(int i = 1; i < dpMatrix.length; i++){
            for(int j = 1; j < dpMatrix[0].length; j++){
                if(s1.charAt(i - 1) == s2.charAt(j - 1)){
                    //System.out.println("Hello");
                    dpMatrix[i][j] = dpMatrix[i - 1][j - 1] + 1;
                }
                else{ // Else here is important otherwise things would get cancelled out.
                    dpMatrix[i][j] = Math.max(dpMatrix[i - 1][j], dpMatrix[i][j - 1]);
                }
                //System.out.println(dpMatrix[i][j]);
            }
        }

        return dpMatrix[length1][length2];
    }

    /*
        Given below is a space optimized version of the dynamic programming solution
        to the above problem. We can reduce the space complexity O(n) as far as I can see it.
        Although we can just do by taking a single array of size n and a couple of
        variables more, I will perhaps take two arrays of size n as it doesn't
        create much of a difference and is easier to understand.
     */

    public int longestCommonSubsequenceSpaceOptimized(String s1, String s2){
        if(s1 == null || s2 == null){
            return 0;
        }

        int length1 = s1.length();
        int length2 = s2.length();

        int[][] spaceOptimizedDp = new int[2][length2 + 1];

        // Dont worry! We dont need to handle empty strings case separately as these wont run 
        // when the strings are empty and by default answer of 0 we will get.
        for(int i = 1; i < length1 + 1; i++){
            for(int k = 0; k < spaceOptimizedDp[0].length; k++){
                spaceOptimizedDp[0][k] = spaceOptimizedDp[1][k];
            }
            for(int j = 1; j < spaceOptimizedDp[0].length; j++){
                if(s1.charAt(i - 1) == s2.charAt(j - 1)){
                    spaceOptimizedDp[1][j] = spaceOptimizedDp[0][j - 1] + 1;
                }
                else { // else is necessary here. Dont repeat your previous mistakes.
                    spaceOptimizedDp[1][j] = Math.max(
                            spaceOptimizedDp[0][j], spaceOptimizedDp[1][j - 1]);
                }
            }
        }

        return spaceOptimizedDp[1][length2];

    }

}